= DeepTest

DeepTest enables tests to run in parallel using multiple processes.  Processes
may spawned locally to take advantage of multiple processors on a single
machine or distributed across many machines to take advantage of distributed
processing.

== Usage

In your Rakefile:

  require "rubygems"
  require "deep_test/rake_tasks"
  
  # sample DeepTest task

  DeepTest::TestTask.new "task_name" do |t|
    t.number_of_workers = 2   # optional, defaults to 2
    t.timeout_in_seconds = 30 # optional, defaults to 30
    t.server_port = 6969      # optional, defaults to 6969
    t.pattern = "test/**/*_test.rb"
  end

  # sample SpecTask using DeepTest

  Spec::Rake::SpecTask.new(:deep_spec) do |t|
    t.spec_files = FileList['spec/**/*_spec.rb']
    t.deep_test :number_of_workers => 2,   # optional, defaults to 2
                :timeout_in_seconds => 30, # optional, defaults to 30
                :server_port => 6969       # optional, defaults to 6969
  end


=== Specifying a Listener to be Notified of Events

In my_worker_listener.rb
  class MyWorkerListener
    def before_starting_workers
    end

    def starting(worker)
    end

    def starting_work(worker, work_unit)
    end

    def finished_work(worker, work_unit, result)
    end
  end

In your Rakefile

  DeepTest::TestTask.new "task_name" do |t|
    ... 
    t.worker_listener = "MyWorkerListener"
  end

An instance of MyWorkerListener will be created for each worker that is
started, and will receive events from that worker.  However, you must ensure
that the MyWorkerListener class is loaded at the time that the test files are
loaded, so it is available to be instantiated.  You can specify multiple
listener classes by separating them with a comma.  For more information about
when events are triggered, see the documentation at
DeepTest::NullWorkerListener.


=== Setting Up A New Database For Each Worker

By default, DeepTest will reinitialize ActiveRecord connections if ActiveRecord
is loaded when the workers are started.  This means all workers are running
against the same database.  You may want each worker to use a database
decidicated to it.  To facilitate this, DeepTest provides a worker listener to
help you.  If you're using Rails with Mysql, simply configure DeepTest as 
follows in your Rakefile:

  DeepTest::TestTask.new "task_name" do |t|
    ...
    t.worker_listener = "DeepTest::Database::MysqlSetupListener"
  end


Before spawning workers, DeepTest will dump the schema of the database for the
current Rails environment (usually test).  As each worker starts up, the
listener will create a database dedicated to that worker and load the schema
into it.  The database will be dropped when the worker process exits.  

If you're using Mysql but not using Rails, you'll have to create a subclass of
MysqlSetupListener and override +master_database_config+ and +dump_file_name+,
as the default implementations of these methods are Rails specific.


If you're using a database other than Mysql, read the documentation for
DeepTest::Database::SetupListener and create a new subclass for your database
type.  If you do this, please consider contributing your subclass back to the
project so that it can be included in later releases of DeepTest.

=== Distributing Tests Across Multiple Machines

DeepTest can run your tests in parallel while distributing them across
multiple machines.

== Contributors

* anonymous z
* Alex Chaffee
* Dan[http://www.dcmanges.com/blog] Manges[http://www.dcmanges.com/blog]
* David[http://davidvollbracht.com/] Vollbracht[http://davidvollbracht.com/]
* Scott Taylor

=== RExpect Developers

* John Carter
* Merc
* Zach Dennis

== License

DeepTest Released under Ruby's[http://www.ruby-lang.org/en/LICENSE.txt] license[http://www.ruby-lang.org/en/LICENSE.txt]
RExpect Released under the LGPL[http://www.gnu.org/licenses/lgpl.html]
For the latest version fo RExpect, visit http://rubyforge.org/projects/rexpect/[http://rubyforge.org/projects/rexpect/]
